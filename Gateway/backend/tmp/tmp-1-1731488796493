import time
import json
from bluepy import btle
import paho.mqtt.client as mqtt

# BLE configuration
BLE_MAC_ADDRESS = "EC:94:CB:4B:DB:12"  # Replace with your BLE device's MAC address
BLE_UUID = "0000ffe1-0000-1000-8000-00805f9b34fb"  # Replace with your BLE characteristic UUID

# MQTT broker configuration
MQTT_SERVER = "192.168.119.171"  # Replace with your MQTT broker IP address
MQTT_PORT = 1883
MQTT_TOPIC = "project/66fcf56925e29e24d92592cc/data"

# MQTT client setup
client = mqtt.Client("Python_Client")

def connect_to_mqtt():
    try:
        client.connect(MQTT_SERVER, MQTT_PORT, 60)
        print(f"Connected to MQTT broker at {MQTT_SERVER}:{MQTT_PORT}")
    except Exception as e:
        print(f"Failed to connect to MQTT broker: {e}")
        exit(1)

def publish_to_mqtt(topic, data):
    """Publish data to MQTT topic."""
    payload = json.dumps(data)
    result = client.publish(topic, payload)
    # Check if the publish was successful
    if result.rc == mqtt.MQTT_ERR_SUCCESS:
        print(f"Data published to MQTT topic {topic}: {payload}")
    else:
        print(f"Failed to publish data to MQTT topic {topic}")

# BLE client setup
class MyDelegate(btle.DefaultDelegate):
    def __init__(self):
        btle.DefaultDelegate.__init__(self)

    def handleNotification(self, cHandle, data):
        """Handle received BLE data."""
        try:
            # Parse and print the data from BLE
            decoded_data = data.decode('utf-8')
            print(f"Received data from BLE: {decoded_data}")
            
            # Simulate received temperature and humidity values from BLE
            temperature, humidity = map(float, decoded_data.split(","))
            
            # Publish the data to MQTT
            mqtt_data = {"Temperature": temperature, "Humidity": humidity}
            publish_to_mqtt(MQTT_TOPIC, mqtt_data)
        except Exception as e:
            print(f"Error handling BLE data: {e}")

def main():
    # Connect to the BLE device
    try:
        print(f"Connecting to BLE device {BLE_MAC_ADDRESS}...")
        ble_device = btle.Peripheral(BLE_MAC_ADDRESS)
        ble_device.setDelegate(MyDelegate())
        print("Connected to BLE device")

        # Get the characteristic by UUID
        characteristic = ble_device.getCharacteristics(uuid=BLE_UUID)[0]
        print(f"Characteristic found: {characteristic}")

        # Connect to MQTT broker
        connect_to_mqtt()

        # Main loop to read and process BLE data
        while True:
            if ble_device.waitForNotifications(5.0):  # Adjust timeout as needed
                continue  # Data handled in the delegate

            # You can perform other tasks here if needed
            print("Waiting for BLE notifications...")

    except Exception as e:
        print(f"Failed to connect to BLE device: {e}")
    finally:
        # Disconnect from BLE device
        if ble_device:
            ble_device.disconnect()
            print("Disconnected from BLE device")

if __name__ == "__main__":
    main()

